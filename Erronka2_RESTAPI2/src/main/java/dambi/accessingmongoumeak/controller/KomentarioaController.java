package dambi.accessingmongoumeak.controller;

import java.sql.Date;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import dambi.accessingmongoumeak.model.Jokoa;
import dambi.accessingmongoumeak.model.Komentarioa.Komentarioa;
import dambi.accessingmongoumeak.model.Komentarioa.KomentarioaRepository;


@RestController // This means that this class is a Controller baina @Controller bakarrik
				// jarrita, PUT eta DELETEak ez dabiz
@RequestMapping(path = "/komentarioak") // This means URL's start with /demo (after Application path)
public class KomentarioaController {
	@Autowired // This means to get the bean called umeaRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private KomentarioaRepository komentarioaRepository;

	@GetMapping(path = "/komentarioGuztiak")
	public @ResponseBody Iterable<Komentarioa> getKomentarioGuztiak() {
		return komentarioaRepository.findAll();
	}

	@GetMapping(path = "/jokoarenKomentarioak")
	public @ResponseBody Iterable<Komentarioa> getJokoarenKomentarioak(String jokoa) {
		return komentarioaRepository.findByJokoa(jokoa);
	}

	@GetMapping(path = "/erabiltzailearenKomentarioak")
	public @ResponseBody Iterable<Komentarioa> getErabiltzailearenKomentarioak(String erabiltzailea) {
		return komentarioaRepository.findByErabiltzailea(erabiltzailea);
	}

	@PostMapping(path = "/komentarioBerria") // Map ONLY POST Requests
	public @ResponseBody String addKomentarioBerria(@RequestParam int _id, @RequestParam String erabiltzailea,@RequestParam int jokoaID,
			@RequestParam String komentarioa, @RequestParam String jokoarenIzena) {
				
		Jokoa jokoa = new Jokoa(jokoaID, jokoarenIzena);
		Komentarioa komentarioBerria = new Komentarioa(_id,erabiltzailea,komentarioa,jokoa);
		komentarioaRepository.save(komentarioBerria);
		return "Saved";
	}

	@DeleteMapping(path = "/delete/{Id}")
	public String deleteKomentarioaById(int id) {
		try {
			return komentarioaRepository.deleteById(id);

		} catch (Exception ex) {
			System.out.println("Errorea " + id + " komentarioa ezabatzerakoan. ");
			return "Errorea egon da";

		}
	}
}

